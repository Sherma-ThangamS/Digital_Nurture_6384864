Scenario 1: 
    The bank wants to apply a discount to loan interest rates for customers above 60 years old.

    Question: 
        Write a PL/SQL block that loops through all customers, checks their age, and if they are above 60, apply a 1% discount to their current loan interest rates.


    Answer:

        BEGIN
            FOR loan_rec IN (
                SELECT l.LoanID
                FROM Customers c
                JOIN Loans l ON l.CustomerID = c.CustomerID
                WHERE TRUNC(MONTHS_BETWEEN(SYSDATE, c.DOB) / 12) > 60
            ) LOOP
                UPDATE Loans
                SET InterestRate = InterestRate * 0.99
                WHERE LoanID = loan_rec.LoanID;
            END LOOP;

            COMMIT;
        END;



Scenario 2: 
    A customer can be promoted to VIP status based on their balance.
    
    Question: 
        Write a PL/SQL block that iterates through all customers and sets a flag IsVIP to TRUE for those with a balance over $10,000.

    Answer:

    BEGIN
        FOR cus IN (
            SELECT CustomerID FROM Customers WHERE Balance > 10000
        ) LOOP
            UPDATE Customers
            SET IsVIP = 'Y'
            WHERE CustomerID = cus.CustomerID;
        END LOOP;

        COMMIT;
    END;


Scenario 3: 
    The bank wants to send reminders to customers whose loans are due within the next 30 days.

    Question: 
        Write a PL/SQL block that fetches all loans due in the next 30 days and prints a reminder message for each customer.

    Answer:

        DECLARE

            CURSOR loan_cursor IS
                SELECT c.name as customer_name, l.loanId as loan_id, l.endDate as due_date
                FROM loans l
                JOIN Customers c
                on c.CustomerID=l.CustomerID
                WHERE l.endDate BETWEEN SYSDATE AND SYSDATE + 30;

        begin
            FOR loan_rec IN loan_cursor LOOP
                DBMS_OUTPUT.PUT_LINE('Reminder: Loan ID ' || loan_rec.loan_id || 
                                    ' for customer ' || loan_rec.customer_name || 
                                    ' is due on ' || TO_CHAR(loan_rec.due_date, 'DD-MON-YYYY') || '.');
            END LOOP;
        END;



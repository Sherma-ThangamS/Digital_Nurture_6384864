Scenario 1: 
    Automatically update the last modified date when a customer's record is updated.

    Question: 
        Write a trigger UpdateCustomerLastModified that updates the LastModified column of the Customers table to the current date whenever a customer's record is updated.

    Answer:

        CREATE OR REPLACE TRIGGER UpdateCustomerLastModified
        BEFORE UPDATE ON Customers
        FOR EACH ROW
        BEGIN
            -- Automatically update the LastModified field
            :NEW.LastModified := SYSDATE;
        END;


Scenario 2: 
    Maintain an audit log for all transactions.

    Question: 
        Write a trigger LogTransaction that inserts a record into an AuditLog table whenever a transaction is inserted into the Transactions table.

    Answer:
        CREATE OR REPLACE TRIGGER LogTransaction
        AFTER INSERT ON Transactions
        FOR EACH ROW
        BEGIN
            INSERT INTO AuditLog (TransactionID, AccountID, TransactionDate, Amount, TransactionType, LoggedAt)
            VALUES (:NEW.TransactionID, :NEW.AccountID, :NEW.TransactionDate, :NEW.Amount, :NEW.TransactionType, SYSDATE);
        END;

Scenario 3: 
    Enforce business rules on deposits and withdrawals.

    Question: 
        Write a trigger CheckTransactionRules that ensures withdrawals do not exceed the balance and deposits are positive before inserting a record into the Transactions table.

    Answer:

        CREATE OR REPLACE TRIGGER CheckTransactionRules
        BEFORE INSERT ON Transactions
        FOR EACH ROW
        DECLARE
            v_Balance NUMBER;
        BEGIN
        
            SELECT Balance INTO v_Balance FROM Accounts WHERE AccountID = :NEW.AccountID;
            
            IF :NEW.TransactionType = 'Withdrawal' AND :NEW.Amount > v_Balance THEN
                RAISE_APPLICATION_ERROR(-20001, 'Error: Withdrawal amount exceeds available balance.');
            END IF;
            
            IF :NEW.TransactionType = 'Deposit' AND :NEW.Amount <= 0 THEN
                RAISE_APPLICATION_ERROR(-20002, 'Error: Deposit amount must be positive.');
            END IF;

            IF :NEW.TransactionType = 'Withdrawal' AND :NEW.Amount <= 0 THEN
                RAISE_APPLICATION_ERROR(-20003, 'Error: Withdrawal amount must be positive.');
            END IF;

        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                RAISE_APPLICATION_ERROR(-20004, 'Error: Account does not exist.');
        END;
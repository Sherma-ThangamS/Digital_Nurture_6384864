Scenario 1: 
    Calculate the age of customers for eligibility checks.
    
    Question: 
        Write a function CalculateAge that takes a customer's date of birth as input and returns their age in years.

    Answer:
        CREATE or REPLACE PROCEDURE CalculateAge(
            dob in DATE
        )
        IS age NUMBER;
        BEGIN

            age := TRUNC(MONTHS_BETWEEN(SYSDATE,dob)/12);
            
            RETURN age;

        END;

Scenario 2: 
    The bank needs to compute the monthly installment for a loan.

    Question: 
        Write a function CalculateMonthlyInstallment that takes the loan amount, interest rate, and loan duration in years as input and returns the monthly installment amount.

    Answer:
        CREATE or REPLACE PROCEDURE CalculateMonthlyInstallment(
            loanAmount in NUMBER,
            annualInterest in NUMBER,
            loanDuration in NUMBER
        )

        IS
        BEGIN

        return (loanAmount+(loanAmount*annualInterest/100)*loanDuration)/(12*loanDuration);

        END

Scenario 3: 
    Check if a customer has sufficient balance before making a transaction.

    Question: 
        Write a function HasSufficientBalance that takes an account ID and an amount as input and returns a boolean indicating whether the account has at least the specified amount.

    Answer:

        CREATE OR REPLACE FUNCTION HasSufficientBalance (
            p_AccountID IN NUMBER,
            p_Amount IN NUMBER
        ) RETURN BOOLEAN
        IS
            v_Balance NUMBER;
        BEGIN
            SELECT Balance INTO v_Balance FROM Accounts WHERE AccountID = p_AccountID;

            IF v_Balance >= p_Amount THEN
                RETURN TRUE;
            ELSE
                RETURN FALSE;
            END IF;

        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                RETURN FALSE; -- Treat as insufficient if account doesn't exist
            WHEN OTHERS THEN
                RETURN FALSE; -- Fail-safe in case of unexpected errors
        END;